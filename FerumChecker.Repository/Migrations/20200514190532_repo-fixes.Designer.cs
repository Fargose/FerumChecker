// <auto-generated />
using System;
using FerumChecker.Repository.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FerumChecker.Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200514190532_repo-fixes")]
    partial class repofixes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.CPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.Property<string>("CoresName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CoresNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("MaxFrequency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ThreadsNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("CPUs");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.HDD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BufferSize")
                        .HasColumnType("int");

                    b.Property<int>("DataTransferSpeed")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("MemorySize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("OuterMemoryFormFactorId")
                        .HasColumnType("int");

                    b.Property<int>("OuterMemoryInterfaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OuterMemoryFormFactorId");

                    b.HasIndex("OuterMemoryInterfaceId");

                    b.ToTable("HDDs");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.MotherBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMemory")
                        .HasColumnType("int");

                    b.Property<int>("MotherBoardFormFactorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherBoardNothernBridgeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MotherBoardFormFactorId");

                    b.HasIndex("MotherBoardNothernBridgeId");

                    b.ToTable("MotherBoards");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.PCCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("PCCases");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.PowerSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoolerSize")
                        .HasColumnType("int");

                    b.Property<int>("GPUInputNumber")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("PowerSupplyMotherBoardInterfaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("SATAInputNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PowerSupplyMotherBoardInterfaceId");

                    b.ToTable("PowerSupplies");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.RAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("MemorySize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("RAMTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("RAMTypeId");

                    b.ToTable("RAMs");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.SSD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("MemorySize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("OuterMemoryFormFactorId")
                        .HasColumnType("int");

                    b.Property<int>("OuterMemoryInterfaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ReadSpeed")
                        .HasColumnType("int");

                    b.Property<int>("WriteSpeed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OuterMemoryFormFactorId");

                    b.HasIndex("OuterMemoryInterfaceId");

                    b.ToTable("SSDs");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.VideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("GPUId")
                        .HasColumnType("int");

                    b.Property<int>("GraphicMemoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryFrequency")
                        .HasColumnType("int");

                    b.Property<int>("MemorySize")
                        .HasColumnType("int");

                    b.Property<int>("MinimumPowerConsuming")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("VideoCardInterfaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GPUId");

                    b.HasIndex("GraphicMemoryTypeId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VideoCardInterfaceId");

                    b.ToTable("VideoCards");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Infrastructure.ComputerAssembly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("MotherBoardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PCCaseId")
                        .HasColumnType("int");

                    b.Property<int>("PowerSupplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPUId");

                    b.HasIndex("MotherBoardId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PCCaseId");

                    b.HasIndex("PowerSupplyId");

                    b.ToTable("ComputerAssemblies");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Infrastructure.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Infrastructure.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Infrastructure.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<int>("DiscVolume")
                        .HasColumnType("int");

                    b.Property<int>("MinimiumRequiredRAM")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedRequiredRAM")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.ComputerAssemblyHDD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerAssemblyId")
                        .HasColumnType("int");

                    b.Property<int>("HDDId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerAssemblyId");

                    b.HasIndex("HDDId");

                    b.ToTable("ComputerAssemblyHDDs");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.ComputerAssemblyRAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerAssemblyId")
                        .HasColumnType("int");

                    b.Property<int>("RAMId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerAssemblyId");

                    b.HasIndex("RAMId");

                    b.ToTable("ComputerAssemblyRAMs");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.ComputerAssemblySSD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerAssemblyId")
                        .HasColumnType("int");

                    b.Property<int>("SSDId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerAssemblyId");

                    b.HasIndex("SSDId");

                    b.ToTable("ComputerAssemblySSDs");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.ComputerAssemblyVideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerAssemblyId")
                        .HasColumnType("int");

                    b.Property<int>("VideoCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerAssemblyId");

                    b.HasIndex("VideoCardId");

                    b.ToTable("ComputerAssemblyVideoCards");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.MotherBoardOuterMemorySlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MotherBoardId")
                        .HasColumnType("int");

                    b.Property<int>("OuterMemoryInterfaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotherBoardId");

                    b.HasIndex("OuterMemoryInterfaceId");

                    b.ToTable("MotherBoardOuterMemorySlots");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.MotherBoardPowerSupplySlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MotherBoardId")
                        .HasColumnType("int");

                    b.Property<int>("PowerSupplyMotherBoardInterfaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotherBoardId");

                    b.HasIndex("PowerSupplyMotherBoardInterfaceId");

                    b.ToTable("MotherBoardPowerSupplySlots");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.MotherBoardRAMSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelsCount")
                        .HasColumnType("int");

                    b.Property<int>("MotherBoardId")
                        .HasColumnType("int");

                    b.Property<int>("RAMTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotherBoardId");

                    b.HasIndex("RAMTypeId");

                    b.ToTable("MotherBoardRAMSlots");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.MotherBoardVideoCardSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MotherBoardId")
                        .HasColumnType("int");

                    b.Property<int>("VideoCardInterfaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotherBoardId");

                    b.HasIndex("VideoCardInterfaceId");

                    b.ToTable("MotherBoardVideoCardSlots");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.PCCaseMotherBoardFormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MotherBoardFormFactorId")
                        .HasColumnType("int");

                    b.Property<int>("PCCaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotherBoardFormFactorId");

                    b.HasIndex("PCCaseId");

                    b.ToTable("PCCaseMotherBoardFormFactors");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.PCCaseOuterMemoryFormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OuterMemoryFormFactorId")
                        .HasColumnType("int");

                    b.Property<int>("PCCaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OuterMemoryFormFactorId");

                    b.HasIndex("PCCaseId");

                    b.ToTable("PCCaseOuterMemoryFormFactors");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.PowerSupplyPowerSupplyCPUInterface", b =>
                {
                    b.Property<int>("PowerSupplyId")
                        .HasColumnType("int");

                    b.Property<int>("PowerSupplyCPUInterfaceId")
                        .HasColumnType("int");

                    b.HasKey("PowerSupplyId", "PowerSupplyCPUInterfaceId");

                    b.HasIndex("PowerSupplyCPUInterfaceId");

                    b.ToTable("PowerSupplyPowerSupplyCPUInterfaces");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.SoftwareCPURequirement", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("RequirementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPUId");

                    b.HasIndex("RequirementTypeId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("SoftwareCPURequirements");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.SoftwareVideoCardRequirement", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RequirementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.Property<int>("VideoCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequirementTypeId");

                    b.HasIndex("SoftwareId");

                    b.HasIndex("VideoCardId");

                    b.ToTable("SoftwareVideoCardRequirements");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.CPUSocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CPUSockets");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.GPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("GPUs");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.GraphicMemoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("GraphicMemoryTypes");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.MotherBoardFormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MotherBoardFormFactors");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.MotherBoardNothernBridge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MotherBoardNothernBridges");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.OuterMemoryFormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OuterMemoryFormFactors");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.OuterMemoryInterface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OuterMemoryInterfaces");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.PowerSupplyCPUInterface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("PowerSupplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PowerSupplyId");

                    b.ToTable("PowerSupplyCPUInterfaces");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.PowerSupplyMotherBoardInterface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PowerSupplyMotherBoardInterfaces");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.RAMType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RAMTypes");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.RequirementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RequirementTypes");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.VideoCardInterface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Multiplier")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VideoCardInterfaces");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.User.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.User.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerAssemblyId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("ComputerAssemblyId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.User.ComputerAssemblyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerAssemblyId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("ComputerAssemblyId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ComputerAssemblyRates");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.User.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.CPU", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.HDD", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.OuterMemoryFormFactor", "OuterMemoryFormFactor")
                        .WithMany()
                        .HasForeignKey("OuterMemoryFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.OuterMemoryInterface", "OuterMemoryInterface")
                        .WithMany()
                        .HasForeignKey("OuterMemoryInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.MotherBoard", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.MotherBoardFormFactor", "MotherBoardFormFactor")
                        .WithMany()
                        .HasForeignKey("MotherBoardFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.MotherBoardNothernBridge", "MotherBoardNothernBridge")
                        .WithMany()
                        .HasForeignKey("MotherBoardNothernBridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.PCCase", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.PowerSupply", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.PowerSupplyMotherBoardInterface", "PowerSupplyMotherBoardInterface")
                        .WithMany()
                        .HasForeignKey("PowerSupplyMotherBoardInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.RAM", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.RAMType", "RAMType")
                        .WithMany()
                        .HasForeignKey("RAMTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.SSD", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.OuterMemoryFormFactor", "OuterMemoryFormFactor")
                        .WithMany()
                        .HasForeignKey("OuterMemoryFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.OuterMemoryInterface", "OuterMemoryInterface")
                        .WithMany()
                        .HasForeignKey("OuterMemoryInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Hardware.VideoCard", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.GPU", "GPU")
                        .WithMany()
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.GraphicMemoryType", "GraphicMemoryType")
                        .WithMany()
                        .HasForeignKey("GraphicMemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.VideoCardInterface", "VideoCardInterface")
                        .WithMany()
                        .HasForeignKey("VideoCardInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Infrastructure.ComputerAssembly", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.CPU", "CPU")
                        .WithMany("ComputerAssemblies")
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.MotherBoard", "MotherBoard")
                        .WithMany("ComputerAssemblies")
                        .HasForeignKey("MotherBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.User.UserProfile", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.PCCase", "PCCase")
                        .WithMany("ComputerAssemblies")
                        .HasForeignKey("PCCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.PowerSupply", "PowerSupply")
                        .WithMany("ComputerAssemblies")
                        .HasForeignKey("PowerSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Infrastructure.Software", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Developer", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.ComputerAssemblyHDD", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.ComputerAssembly", "ComputerAssembly")
                        .WithMany()
                        .HasForeignKey("ComputerAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.HDD", "HDD")
                        .WithMany()
                        .HasForeignKey("HDDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.ComputerAssemblyRAM", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.ComputerAssembly", "ComputerAssembly")
                        .WithMany()
                        .HasForeignKey("ComputerAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.RAM", "RAM")
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.ComputerAssemblySSD", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.ComputerAssembly", "ComputerAssembly")
                        .WithMany()
                        .HasForeignKey("ComputerAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.SSD", "SSD")
                        .WithMany()
                        .HasForeignKey("SSDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.ComputerAssemblyVideoCard", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.ComputerAssembly", "ComputerAssembly")
                        .WithMany()
                        .HasForeignKey("ComputerAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.VideoCard", "VideoCard")
                        .WithMany()
                        .HasForeignKey("VideoCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.MotherBoardOuterMemorySlot", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.MotherBoard", "MotherBoard")
                        .WithMany("MotherBoardOuterMemorySlots")
                        .HasForeignKey("MotherBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.OuterMemoryInterface", "OuterMemoryInterface")
                        .WithMany()
                        .HasForeignKey("OuterMemoryInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.MotherBoardPowerSupplySlot", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.MotherBoard", "MotherBoard")
                        .WithMany("PowerSupplyMotherBoardSlots")
                        .HasForeignKey("MotherBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.PowerSupplyMotherBoardInterface", "PowerSupplyMotherBoardInterface")
                        .WithMany()
                        .HasForeignKey("PowerSupplyMotherBoardInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.MotherBoardRAMSlot", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.MotherBoard", "MotherBoard")
                        .WithMany("PowerSupplyCPUInterfaces")
                        .HasForeignKey("MotherBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.RAMType", "RAMType")
                        .WithMany()
                        .HasForeignKey("RAMTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.MotherBoardVideoCardSlot", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.MotherBoard", "MotherBoard")
                        .WithMany("MotherBoardVideoCardSlots")
                        .HasForeignKey("MotherBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.VideoCardInterface", "VideoCardInterface")
                        .WithMany()
                        .HasForeignKey("VideoCardInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.PCCaseMotherBoardFormFactor", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.MotherBoardFormFactor", "MotherBoardFormFactor")
                        .WithMany()
                        .HasForeignKey("MotherBoardFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.PCCase", "PCCase")
                        .WithMany("PCCaseMotherBoardFormFactors")
                        .HasForeignKey("PCCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.PCCaseOuterMemoryFormFactor", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.OuterMemoryFormFactor", "OuterMemoryFormFactors")
                        .WithMany()
                        .HasForeignKey("OuterMemoryFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.PCCase", "PCCase")
                        .WithMany("PCCaseOuterMemoryFormFactors")
                        .HasForeignKey("PCCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.PowerSupplyPowerSupplyCPUInterface", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.PowerSupplyCPUInterface", "PowerSupplyCPUInterface")
                        .WithMany()
                        .HasForeignKey("PowerSupplyCPUInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.PowerSupply", "PowerSupply")
                        .WithMany()
                        .HasForeignKey("PowerSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.SoftwareCPURequirement", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.CPU", "CPU")
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.RequirementType", "RequirementType")
                        .WithMany()
                        .HasForeignKey("RequirementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Software", "Software")
                        .WithMany("SoftwareCPURequirements")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Joins.SoftwareVideoCardRequirement", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Specification.RequirementType", "RequirementType")
                        .WithMany()
                        .HasForeignKey("RequirementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.Software", "Software")
                        .WithMany("SoftwareVideoCardRequirements")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.VideoCard", "VideoCard")
                        .WithMany()
                        .HasForeignKey("VideoCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.Specification.PowerSupplyCPUInterface", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Hardware.PowerSupply", null)
                        .WithMany("PowerSupplyCPUInterfaces")
                        .HasForeignKey("PowerSupplyId");
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.User.Comment", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.ComputerAssembly", "ComputerAssemblies")
                        .WithMany("Comments")
                        .HasForeignKey("ComputerAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.User.UserProfile", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.User.ComputerAssemblyRate", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.Infrastructure.ComputerAssembly", "ComputerAssemblies")
                        .WithMany("ComputerAssemblyRates")
                        .HasForeignKey("ComputerAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.User.UserProfile", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FerumChecker.DataAccess.Entities.User.UserProfile", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("FerumChecker.DataAccess.Entities.User.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FerumChecker.DataAccess.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FerumChecker.DataAccess.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
